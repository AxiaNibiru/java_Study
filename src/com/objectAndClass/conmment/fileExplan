/*此文件为说明文件*/
/**
 * This program demonstrates a triangular array
 * @version 1.3.00 2021-03-25
 * @author axiaNibiru
 * */
传统结构化程序设计通过一系列的过程(即算法)来求解问题. 一旦确定了这些过程, 就要开始考虑存储数据的适当方式. (算法+数据结构=程序)
//---------------------------------------------------------------------------------------------------------------------
而OOP(面向对象)却调换了这个过程, 将数据放在第一位, 然后再考虑数据的算法.

1.类
    类, 是构造对象的模板或蓝图. 由类构造对象的过程我们都称之为创建类的实例.

2.封装
    封装(有时称为数据隐藏), 是处理对象的一个重要概念.
(1)从形式上看, 封装数据就是将数据和行为组合在一个包中, 并对对象的使用者隐藏具体方法. 对象中的数据称为实例字段, 操作数据的过程
称为方法. 作为一个类的实例, 特定对象都有一组特定的实例字段值. 这些值的集合就是这个对象的当前状态.

(2)黑盒特征
    绝对不能让类中的方法直接访问其他类的实例字段. 程序只能通过对象的方法与对象进行交互. 封装给予了对象黑河特征, 能够大大提高类
的重用性和可靠性.
注: 这意味着一个类可以完全改变数据存储的方式, 只需使用同样的方法操作数据.

3.Object类
    Java可以通过扩展其他类来构造新类.(这使得用户自定义java类变得容易, 其他所有类都扩展自这个Object类), 通过一个类来建立另一个
类的过程称为继承.

4.对象
    OOP(面向对象), 的三个主要特征
    * 对象的行为 -- 可以对对象完成那些操作, 或者可以对对象应用那些方法
    * 对象的状态 -- 当调用那些方法时对象会如何相应
    * 对象的标识 -- 如何区分有相同行为与状态的不同对象

5.识别类
    对对象的理解, 理解对象之间的关系, 通过什么方法(行为)来操作达到实际想作用的效果.
(1)类与类之间的关系
    * 依赖("use-a") -- 例如: A需要查看B的信息, 而B却不需要考虑A的状态这种称为一个类依赖于另一个类, 除此还有双向依赖(尽量减少降低耦合)
    * 聚合("has-a") -- 例如: A类对象包含B类对象
    * 继承("is-a") -- 例如: A extend B;

(2)预定义类
    * 并非所有类都表现出面向对象的典型特征(只需使用的预定义类)

6创建对象
    想要使用对象, 首先要构造对象, 并指定其初始状态. 然后对对象应用方法,